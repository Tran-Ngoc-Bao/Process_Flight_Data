version: '3'

x-airflow-common:
  &airflow-common
  image: airflow
  # build: ./airflow
  depends_on:
    postgres:
      condition: service_healthy
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- apache-airflow-providers-microsoft-mssql}
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  networks:
    flight_net:
  volumes:
    - airflow_logs:/opt/airflow/logs
    - airflow_plugins:/opt/airflow/plugins
    - airflow_scripts:/opt/airflow/scripts
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/source:/opt/airflow/source
    - ./spark:/opt/airflow/spark
    - ./trino/sql:/opt/airflow/sql
    - ./kafka:/opt/airflow/kafka

services:
  # Server backend data source
  data-source:
    image: data-source
    container_name: data-source
    ports:
      - 5000:5000
    restart: always
    networks:
      flight_net:
    volumes:
      - ./data_source:/data

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    healthcheck:
      test: nc -z zookeeper 2181 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    ports:
      - 2181:2181
    networks:
      flight_net:
    volumes:
      - zookeeper_secrets:/etc/zookeeper/secrets
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
  
  broker01:
    image: confluentinc/cp-kafka
    container_name: broker01
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT_HOST://broker01:9092,PLAINTEXT://broker01:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker01:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_JMX_PORT: 9090
      KAFKA_LOG_DIRS: /var/log/kafka
      KAFKA_NUM_PARTITIONS: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      CONFLUENT_METRICS_ENABLE: 'false'
    healthcheck:
      test: nc -z broker01 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    mem_limit: 1G
    ports:
      - 9092:9092
    networks:
      flight_net:
    volumes:
      - ./kafka/run_workaround.sh:/tmp/run_workaround.sh
      - kafka_secrets:/etc/kafka/secrets
      - kafka_data:/var/lib/kafka/data

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      broker01:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: flight-data
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker01:9093
      KAFKA_CLUSTERS_0_METRICS_PORT: 9090
    healthcheck:
      test: nc -z kafka-ui 8080 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    mem_limit: 1G
    ports:
      - 8282:8080
    networks:
      flight_net:

  # Airflow
  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      flight_net:
    volumes:
      - postgres_db_volume:/var/lib/postgresql/data

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - 8080:8080
    restart: always
    command: webserver

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    restart: always
    command: scheduler

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    command: version

  # HDFS
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop/hadoop.env
    ports:
      - 9870:9870
      - 9000:9000
    restart: always
    networks:
      flight_net:
    volumes:
      - hadoop_namenode:/hadoop/dfs/name

  datanode01:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode01
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop/hadoop.env
    restart: always
    networks:
      flight_net:
    volumes:
      - hadoop_datanode01:/hadoop/dfs/data

  datanode02:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode02
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop/hadoop.env
    restart: always
    networks:
      flight_net:
    volumes:
      - hadoop_datanode02:/hadoop/dfs/data

  datanode03:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode03
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop/hadoop.env
    restart: always
    networks:
      flight_net:
    volumes:
      - hadoop_datanode03:/hadoop/dfs/data
  
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870"
    env_file:
      - ./hadoop/hadoop.env
    ports:
      - 8888:8088
    restart: always
    networks:
      flight_net:

  nodemanager:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 resourcemanager:8088"
    env_file:
      - ./hadoop/hadoop.env
    restart: always
    networks:
      flight_net:
  
  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 resourcemanager:8088"
    env_file:
      - ./hadoop/hadoop.env
    ports:
      - 8188:8188
    restart: always
    networks:
      flight_net:
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline

  # Data Warehouse
  trino:
    image: trinodb/trino:457
    container_name: trino
    ports:
      - 8383:8080
    networks:
      flight_net:
    volumes:
      - ./trino/etc:/usr/lib/trino/etc:ro
      - ./trino/catalog:/etc/trino/catalog

  hive-metastore-postgresql:
    image: bde2020/hive-metastore-postgresql:2.3.0
    container_name: hive-metastore-postgresql
    networks:
      flight_net:
    volumes:
      - hive_metastore_postgresql:/var/lib/postgresql/data

  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    environment:
      SERVICE_PRECONDITION: "hive-metastore-postgresql:5432"
    env_file:
      - ./hadoop/hadoop-hive.env
    ports:
      - 9083:9083
    command: /opt/hive/bin/hive --service metastore
    networks:
      flight_net:

  # Superset
  superset:
    image: superset
    # build: ./superset
    container_name: superset
    environment:
      - SUPERSET_SECRET_KEY=secret
    ports:
      - 8088:8088
    networks:
      flight_net:
    volumes:
      - superset_data:/app/superset_home

networks:
  flight_net:
  
volumes:
  zookeeper_secrets:
  zookeeper_data:
  zookeeper_log:
  kafka_secrets:
  kafka_data:
  postgres_db_volume:
  airflow_logs:
  airflow_plugins:
  airflow_scripts:
  hadoop_namenode:
  hadoop_datanode01:
  hadoop_datanode02:
  hadoop_datanode03:
  hadoop_historyserver:
  hive_metastore_postgresql:
  superset_data: